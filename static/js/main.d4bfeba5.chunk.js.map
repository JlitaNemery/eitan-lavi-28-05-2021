{"version":3,"sources":["redux/slices/activeViewSlice.js","redux/slices/menuSlice.js","redux/slices/temperatureSlice.js","redux/slices/searchKeySlice.js","components/Header.jsx","hooks/useValidation.jsx","api/api.js","redux/slices/citySlice.js","redux/slices/currentWeatherSlice.js","redux/slices/forecastSlice.js","redux/slices/favoritesSlice.js","redux/slices/serchResultsSlice.js","components/Main.jsx","redux/slices/favoritesDataSlice.js","components/Favorites.jsx","redux/slices/themeSlice.js","App.jsx","redux/store.js","index.js"],"names":["setActiveView","view","type","payload","initialView","selectActiveView","state","activeView","selectMenuToggle","menuToggle","selectTemperature","temperatureToggle","setSearchKey","searchKey","selectSearchKey","Header","dispatch","useDispatch","useSelector","handleClick","handleMenuToggle","bool","setMenuToggle","id","className","htmlFor","name","checked","onChange","e","target","setTemperatureToggle","style","top","onClick","useValidation","initialValue","regex","errorText","useState","value","setValue","isValid","setIsValid","error","setError","useEffect","test","api","setCity","city","initialCity","selectCity","setCurrentWeather","currentWeather","selectCurrentWeather","setForecast","forecast","selectForecast","setFavorites","favorites","initialFavorites","selectFavorites","initial","selectSearchResults","searchResults","Main","removeFavorite","getCurrentTemperature","getWeatherImage","DegreesIcon","defaultSearchKey","isKeyValid","setIsKeyValid","invalidKeyError","getCity","undefined","Key","getForecast","handleSubmit","a","preventDefault","cityKey","i","length","LocalizedName","NotificationManager","getCurrentConditions","location","url","fetch","then","response","json","data","console","log","catch","DailyForecasts","val","getAllData","addRemoveFavorites","key","includes","newFavorites","localStorage","setItem","JSON","stringify","parse","getItem","addFavorite","formatWeekDay","dateString","date","Date","Intl","DateTimeFormat","weekday","format","Content","backgroundImage","WeatherIcon","WeatherText","icon","faHeart","overflowY","map","day","Day","Icon","IconPhrase","Temperature","Minimum","Value","str","Unit","Maximum","EpochDate","onSubmit","spellCheck","getItemValue","item","items","renderItem","isHighlighted","onSelect","handleSelect","faSearch","setFavoritesData","favoritesData","initialFavoritesData","selectFavoritesData","Favorites","getForcastAll","split","Promise","all","values","res","fixedData","arr","getFavoritesForecast","favorite","cityName","NoData","margin","setTheme","theme","selectTheme","App","cityId","newFavoritesData","filter","Metric","Imperial","toString","toLowerCase","tempTheme","changeTheme","faSun","faMoon","reducers","action","store","createStore","combineReducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4bfeba5.chunk.js","sourcesContent":["export const setActiveView = (view) =>{\r\n    return{\r\n        type:'activeView/setActiveView',\r\n        payload:view\r\n    }\r\n}\r\n\r\nconst initialView = 'Main';\r\nexport const activeViewReducer = (state = initialView, action) =>{\r\n    switch(action.type){\r\n        case 'activeView/setActiveView':\r\n            return action.payload ? action.payload : state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectActiveView = (state => state.activeView);","export const setMenuToggle = (bool) =>{\r\n    return{\r\n        type:'menu/setToggle',\r\n        payload:bool\r\n    }\r\n}\r\n\r\nconst initialType = false;\r\nexport const menuToggleReducer = (state = initialType, action) =>{\r\n    switch(action.type){\r\n        case 'menu/setToggle':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectMenuToggle = (state => state.menuToggle);","export const setTemperatureToggle = (bool) =>{\r\n    return{\r\n        type:'temperature/setTemperatureToggle',\r\n        payload:bool\r\n    }\r\n}\r\n\r\nconst initialType = true;\r\nexport const temperatureReducer = (state = initialType, action) =>{\r\n    switch(action.type){\r\n        case 'temperature/setTemperatureToggle':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectTemperature = (state => state.temperatureToggle);","export const setSearchKey = (searchKey) =>{\r\n    return{\r\n        type:'searchKey/setSearchKey',\r\n        payload:searchKey\r\n    }\r\n}\r\n\r\nconst initialKey = '';\r\nexport const searchKeyReducer = (state = initialKey, action) =>{\r\n    switch(action.type){\r\n        case 'searchKey/setSearchKey':\r\n            return action.payload ? action.payload : initialKey;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectSearchKey = (state => state.searchKey);","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setActiveView, selectActiveView } from '../redux/slices/activeViewSlice';\r\nimport { selectMenuToggle, setMenuToggle } from '../redux/slices/menuSlice';\r\nimport { setTemperatureToggle, selectTemperature } from '../redux/slices/temperatureSlice';\r\nimport { setSearchKey } from '../redux/slices/searchKeySlice';\r\n\r\nconst Header = ({}) =>{\r\n    const dispatch = useDispatch();\r\n    const activeView = useSelector(selectActiveView);\r\n    const temperatureToggle = useSelector(selectTemperature);\r\n    const menuToggle = useSelector(selectMenuToggle);\r\n\r\n    const handleClick = (view) =>{\r\n        dispatch(setSearchKey(''))\r\n        dispatch(setActiveView(view));\r\n        handleMenuToggle(false);\r\n    }\r\n    const handleTemperatureToggle = (bool) =>{\r\n        dispatch(setTemperatureToggle(bool));\r\n    }\r\n    const handleMenuToggle = (bool) =>{\r\n        dispatch(setMenuToggle(bool));\r\n    }\r\n\r\n    return(\r\n        <div id=\"header\">\r\n            <div className=\"title\">Eitan's weather app</div>\r\n            <div className=\"switch-env\">\r\n                <span>&#8457;</span>\r\n                <label className=\"switch\" htmlFor=\"temprature-selector\">\r\n                    <input type=\"checkbox\" \r\n                        name=\"temprature-selector\" \r\n                        id=\"temprature-selector\"\r\n                        checked={temperatureToggle}\r\n                        onChange={e => handleTemperatureToggle(e.target.checked)}        \r\n                        ></input>\r\n                    <span className=\"slider\"></span>\r\n                </label>\r\n                <span>&#8451;</span>\r\n            </div>\r\n            <div className=\"navigation\">\r\n                <div id=\"menu\">\r\n                    <input id=\"burger\" type=\"checkbox\"\r\n                        checked={menuToggle}\r\n                        onChange={e => handleMenuToggle(e.target.checked)} \r\n                    />\r\n                    <label htmlFor=\"burger\">\r\n                        <div>\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </label>\r\n\r\n                    <nav>    \r\n                    <div className=\"text-env\" style={{top: menuToggle ? '35%' : '100%'}}>\r\n                        <div onClick={() =>{handleClick('Favorites')}}>Favorites</div>\r\n                        <div onClick={() =>{handleClick('Main')}}>Main</div>\r\n                    </div>  \r\n                    </nav>\r\n                </div>\r\n                <div className=\"desktop\">\r\n                    <div \r\n                        onClick={() =>{handleClick('Main')}}\r\n                        className={`button ${activeView === 'Main' ? 'active' : ''}`}\r\n                    >Main</div>\r\n                                        <div \r\n                        onClick={() =>{handleClick('Favorites')}}\r\n                        className={`button ${activeView === 'Favorites' ? 'active' : ''}`}\r\n                    >Favorites</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import { useState, useEffect }from 'react'\r\nconst useValidation = function(initialValue, regex, errorText){\r\n    const [value, setValue] = useState(initialValue);\r\n    const [isValid, setIsValid] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {               \r\n        if(!regex.test(value) && value !==''){\r\n            setError(errorText);\r\n            setIsValid(false);\r\n        }else{\r\n            setIsValid(true);\r\n        }\r\n    },[value])\r\n    return [isValid, setValue, error];\r\n}\r\nexport default useValidation;","export const api = {\r\n    key:'HadMXOom5YKgwzzsfCoggIoAZigQV4vc'\r\n}\r\n\r\n\r\n","export const setCity = (city) =>{\r\n    return{\r\n        type:'city/setCity',\r\n        payload:city\r\n    }\r\n}\r\n\r\nconst initialCity = {};\r\nexport const cityReducer = (state = initialCity, action) =>{\r\n    switch(action.type){\r\n        case 'city/setCity':\r\n            return action.payload ? action.payload : state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectCity = (state => state.city);","export const setCurrentWeather = (currentWeather) =>{\r\n    return{\r\n        type:'currentWeather/setWeather',\r\n        payload:currentWeather\r\n    }\r\n}\r\n\r\nconst initialWeather = null;\r\nexport const currentWeatherReducer = (state = initialWeather, action) =>{\r\n    switch(action.type){\r\n        case 'currentWeather/setWeather':\r\n            return action.payload ? action.payload : state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectCurrentWeather = (state => state.currentWeather);","export const setForecast = (forecast) =>{\r\n    return{\r\n        type:'forecast/setForecast',\r\n        payload:forecast\r\n    }\r\n}\r\n\r\nconst initialForecast = null;\r\nexport const forecastReducer = (state = initialForecast, action) =>{\r\n    switch(action.type){\r\n        case 'forecast/setForecast':\r\n            return action.payload ? action.payload : state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectForecast = (state => state.forecast);","export const setFavorites = (favorites) =>{\r\n    return{\r\n        type:'favorites/setFavorites',\r\n        payload:favorites\r\n    }\r\n}\r\n\r\nconst initialFavorites = [];\r\nexport const favoritesReducer = (state = initialFavorites, action) =>{\r\n    switch(action.type){\r\n        case 'favorites/setFavorites':\r\n            return action.payload ? action.payload : state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectFavorites = (state => state.favorites);","export const setSearchResults = (objArray) =>{\r\n    return{\r\n        type:'searchResults/setSearchResults',\r\n        payload:objArray\r\n    }\r\n}\r\n\r\nconst initial = [];\r\nexport const searchResultsReducer = (state = initial, action) =>{\r\n    switch(action.type){\r\n        case 'searchResults/setSearchResults':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectSearchResults = (state => state.searchResults);","import React , { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport useValidation from '../hooks/useValidation';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { api } from '../api/api';\r\nimport { setCity, selectCity } from '../redux/slices/citySlice';\r\nimport { setSearchKey, selectSearchKey } from '../redux/slices/searchKeySlice';\r\nimport { setCurrentWeather, selectCurrentWeather } from '../redux/slices/currentWeatherSlice';\r\nimport { setForecast, selectForecast } from '../redux/slices/forecastSlice';\r\nimport { selectTemperature } from '../redux/slices/temperatureSlice';\r\nimport { selectActiveView } from '../redux/slices/activeViewSlice';\r\nimport { setFavorites, selectFavorites } from '../redux/slices/favoritesSlice';\r\nimport { setSearchResults, selectSearchResults } from '../redux/slices/serchResultsSlice';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport Autocomplete from 'react-autocomplete';\r\n\r\nconst Main = ({removeFavorite, getCurrentTemperature, getWeatherImage, DegreesIcon, defaultSearchKey}) =>{\r\n    const dispatch = useDispatch();\r\n    const city = useSelector(selectCity);\r\n    const searchKey = useSelector(selectSearchKey);\r\n    const currentWeather = useSelector(selectCurrentWeather);\r\n    const forecast = useSelector(selectForecast);\r\n    const temperatureToggle = useSelector(selectTemperature);\r\n    const favorites = useSelector(selectFavorites);\r\n    const activeView = useSelector(selectActiveView);\r\n    const [isKeyValid, setIsKeyValid, invalidKeyError] = useValidation(searchKey, /^[a-zA-Z\\s]+$/, 'Ileagal characters'); \r\n    const searchResults = useSelector(selectSearchResults);\r\n\r\n    useEffect(() =>{\r\n        getCity(defaultSearchKey, true);\r\n    }, [defaultSearchKey]);\r\n\r\n    useEffect(() =>{\r\n        if(searchKey !== undefined && searchKey !== '' && activeView === 'Main'){\r\n            getCity(searchKey, true);\r\n        }\r\n    }, [activeView]);\r\n\r\n    useEffect(() => {\r\n        if(city.Key){\r\n            getForecast(city.Key);\r\n        }\r\n    }, [temperatureToggle])\r\n\r\n    const handleSubmit = async (e) =>{\r\n        e.preventDefault();\r\n        if(!isKeyValid){\r\n            return;\r\n        }\r\n        let cityKey = 'no-key';\r\n        for(let i = 0; i < searchResults.length; i++){\r\n            if(searchResults[i].LocalizedName === e.target[0].value){\r\n                cityKey = searchResults[i].Key;\r\n                break;\r\n            }\r\n        }\r\n        if(cityKey === 'no-key'){\r\n            NotificationManager.error('No imaginary cities pls...', 'Whoops...', 3000);\r\n            return\r\n        }\r\n        dispatch(setCity(searchResults[0]));\r\n        getCurrentConditions(cityKey);\r\n        getForecast(cityKey);\r\n    }\r\n    const getCurrentConditions = async(location) => {\r\n        const url = `http://dataservice.accuweather.com/currentconditions/v1/${location}?apikey=${api.key}`;\r\n        fetch(url)\r\n            .then((response) => response.json())\r\n            .then(data => {  \r\n                dispatch(setCurrentWeather(data[0]));\r\n                console.log(currentWeather);\r\n            }).catch((error) =>{\r\n                NotificationManager.error(\"Can't get weather, If I knew I'd tell you\", 'Whoops...', 3000);\r\n            })\r\n\r\n    }\r\n    const getForecast = async(location) => {\r\n        const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${location}?apikey=${api.key}&metric=${temperatureToggle}`;\r\n        fetch(url)\r\n            .then((response) => response.json())\r\n            .then(data => {\r\n                dispatch(setForecast(data.DailyForecasts));\r\n            }).catch((error) =>{\r\n                NotificationManager.error(\"Can't get weather, If I knew I'd tell you\", 'Whoops...', 3000);\r\n            })\r\n    }\r\n    const getCity = async (val, getAllData) => {\r\n        const url = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${api.key}&q=${val}`;      \r\n        fetch(url)\r\n            .then((response) => response.json())\r\n            .then(data => {\r\n                dispatch(setSearchResults(data));\r\n                if(getAllData){\r\n                    dispatch(setCity(data[0]));\r\n                    getCurrentConditions(data[0].Key);\r\n                    getForecast(data[0].Key);\r\n                }\r\n            }).catch((error) =>{\r\n                NotificationManager.error('No city found, Are you lost?', 'Whoops...', 3000);\r\n            })\r\n    }\r\n\r\n    const handleInputChange = (value) => {\r\n        const hasLetters = /[a-zA-Z]/g;\r\n        dispatch(setSearchKey(value));        \r\n        setIsKeyValid(value);\r\n        if(isKeyValid && hasLetters.test(value)){\r\n            getCity(value)\r\n        }\r\n    }\r\n\r\n    const addFavorite = (key) =>{\r\n        if(favorites.length > 0){\r\n            const newFavorites = [...favorites, key]\r\n            localStorage.setItem('favorites', JSON.stringify(newFavorites));\r\n        }else{\r\n            localStorage.setItem('favorites', JSON.stringify([key]));\r\n        }\r\n        dispatch(setFavorites(JSON.parse(localStorage.getItem('favorites'))));\r\n    }\r\n\r\n    const addRemoveFavorites = (key) =>{\r\n        if(favorites.includes(key)){\r\n            removeFavorite(key);\r\n        }else{\r\n            addFavorite(key);\r\n        }\r\n    }\r\n\r\n    const formatWeekDay = (dateString) =>{\r\n        const date = new Date(dateString);\r\n        return Intl.DateTimeFormat('en-US', { weekday: 'short'}).format(date);\r\n    }\r\n\r\n    const handleSelect = (val) =>{\r\n        dispatch(setSearchKey(val)); \r\n        setIsKeyValid(val);\r\n        if(!isKeyValid){\r\n            return;\r\n        }\r\n        getCity(val, true);\r\n    } \r\n    \r\n    const Content = () =>{\r\n        return(\r\n        <div className=\"content-env\">\r\n            <div className=\"top-row\">\r\n                <div className=\"city\">\r\n                    <div className=\"weather-image\"\r\n                        style={{backgroundImage: getWeatherImage(currentWeather?.WeatherIcon)}}\r\n                    ></div>                \r\n                    <div className=\"text-large\">\r\n                        <div className=\"name\">{city.LocalizedName}</div>\r\n                        <div className=\"conditions\">\r\n                            <div className=\"temperature\">{getCurrentTemperature(currentWeather)}</div>\r\n                            <div>{currentWeather.WeatherText}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"info\">\r\n                    \r\n                </div>\r\n                <div className=\"favorites-button\" onClick={() => addRemoveFavorites(city.Key + ':' + city.LocalizedName)}>\r\n                    <div className={`icon ${favorites.includes(city.Key + ':' + city.LocalizedName) ? 'remove' : 'add'}`}>                        \r\n                        <FontAwesomeIcon icon={faHeart}/>                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"forecast-env\" style={{overflowY:'scroll'}}>\r\n                <div className=\"forecast\">\r\n                    {\r\n                        forecast.map(day => (\r\n                            <div className=\"box\" key={day.EpochDate}\r\n                                style={{backgroundImage: getWeatherImage(day.Day.Icon)}}\r\n                            >                                \r\n                                <div className=\"day\">{formatWeekDay(day.Date)}</div>\r\n                                <div className=\"text\">{day.Day.IconPhrase}</div>\r\n                                <div className=\"temperature\">\r\n                                    <div className=\"min\">\r\n                                        <span>{day.Temperature.Minimum.Value}</span>\r\n                                        <DegreesIcon str={day.Temperature.Minimum.Unit}/>\r\n                                    </div>\r\n                                    <span>-</span>\r\n                                    <div className=\"max\">\r\n                                        <span>{day.Temperature.Maximum.Value}</span>\r\n                                        <DegreesIcon str={day.Temperature.Maximum.Unit}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n    return(\r\n        <div id=\"main\">            \r\n            <div className=\"search-box-env\">\r\n                <div className=\"search-box\">\r\n                    <form onSubmit={handleSubmit} spellCheck=\"false\">\r\n                        <Autocomplete                            \r\n                            getItemValue={(item) => item.LocalizedName}\r\n                            items={searchResults}\r\n                            renderItem={(item, isHighlighted) =>\r\n                                <div key={item.Key} \r\n                                    className={`selection ${isHighlighted ? 'highlight' : 'normal'}`}\r\n                                >\r\n                                    {item.LocalizedName}\r\n                                </div>\r\n                            }\r\n                            value={searchKey}\r\n                            onChange={e => handleInputChange(e.target.value)}\r\n                            onSelect={(val) => handleSelect(val)}\r\n                        />\r\n                        <button type=\"submit\" className={`submit-search ${!isKeyValid ? 'disabled' : ''}`}>\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </button>\r\n                    </form>\r\n                    <div className=\"error-env\">\r\n                        <div className={isKeyValid ? \"invalid-search\": \"invalid-search on\"}>{invalidKeyError}</div>                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                forecast && currentWeather ? <Content/> : <div className=\"loader\">Loading...</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","export const setFavoritesData = (favoritesData) =>{\r\n    return{\r\n        type:'favoritesData/setFavoritesData',\r\n        payload:favoritesData\r\n    }\r\n}\r\n\r\nconst initialFavoritesData = [];\r\nexport const favoritesDataReducer = (state = initialFavoritesData, action) =>{\r\n    switch(action.type){\r\n        case 'favoritesData/setFavoritesData':\r\n            return action.payload ? action.payload : state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectFavoritesData = (state => state.favoritesData);","import React , {useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { api } from '../api/api';\r\nimport { selectFavorites } from '../redux/slices/favoritesSlice';\r\nimport { setFavoritesData, selectFavoritesData } from '../redux/slices/favoritesDataSlice';\r\nimport { setActiveView } from '../redux/slices/activeViewSlice';\r\nimport { setSearchKey } from '../redux/slices/searchKeySlice';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nconst Favorites = ({removeFavorite, getCurrentTemperature, getWeatherImage}) =>{\r\n\r\n    const dispatch = useDispatch();\r\n    const favorites = useSelector(selectFavorites);\r\n    const favoritesData = useSelector(selectFavoritesData);\r\n\r\n    const getFavoritesForecast = () =>{\r\n        const getForcastAll = favorites.map(str =>{\r\n            let key = str.split(':')[0];\r\n            return fetch(`http://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=${api.key}`);\r\n        });\r\n        Promise.all(getForcastAll).then((values) => {\r\n            return Promise.all(\r\n                values.map((res) => {\r\n                    return res.json();\r\n                })\r\n            ).then(data =>{                \r\n                const fixedData = data.map((arr, i) =>{\r\n                    let [key, name] = favorites[i].split(':');\r\n                    return {...arr[0], key, name};\r\n                })\r\n                dispatch(setFavoritesData(fixedData));\r\n            }).catch(error => {NotificationManager.error(\"Can't get weather, If I knew I'd tell you\", 'Whoops...', 3000);});       \r\n        }).catch(error => NotificationManager.error(\"Can't get weather, If I knew I'd tell you\", 'Whoops...', 3000));\r\n    }\r\n\r\n    useEffect(() =>{\r\n        getFavoritesForecast();\r\n    }, [favorites])    \r\n\r\n    const goToMain = (cityName) =>{\r\n        dispatch(setSearchKey(cityName));\r\n        dispatch(setActiveView('Main'));\r\n    }\r\n\r\n    const Content = () =>{\r\n        return(\r\n            <div className=\"boxes\">\r\n                {\r\n                favoritesData.map(favorite => (\r\n                    <div className=\"box\" key={favorite.key}\r\n                        style={{backgroundImage:getWeatherImage(favorite.WeatherIcon)}}\r\n                    >\r\n                        <div className=\"dark\" onClick={() =>{goToMain(favorite.name)}}></div>\r\n                        <div className=\"icon\" onClick={() =>{removeFavorite(favorite.key + ':' + favorite.name)}}>                        \r\n                            <FontAwesomeIcon icon={faHeart}/>                    \r\n                        </div>\r\n                        <div className=\"city-name\">{favorite.name}</div>\r\n                        <div className=\"text\">{favorite.WeatherText}</div>\r\n                        <div className=\"temperature\">{getCurrentTemperature(favorite)}</div>\r\n                        <div className=\"city-id\">\r\n                            <span>id: </span>\r\n                            <span>{favorite.key}</span>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const NoData = () =>{\r\n        return(\r\n            <div style={{margin:'auto'}}>\r\n                <span>You have no favorites yet... except you :)</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div id=\"favorites\">            \r\n            <div className=\"content-env\">\r\n            <div className=\"top-row\"></div>\r\n                {\r\n                    favoritesData.length > 0 ? <Content/> : <NoData/>\r\n                }                    \r\n            </div>\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default Favorites;","export const setTheme = (theme) =>{\r\n    return{\r\n        type:'theme/setTheme',\r\n        payload:theme\r\n    }\r\n}\r\n\r\nconst initial = 'Dark';\r\nexport const themeReducer = (state = initial, action) =>{\r\n    switch(action.type){\r\n        case 'theme/setTheme':\r\n            return action.payload ? action.payload : initial;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectTheme = (state => state.theme);","import React , {useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Header from './components/Header';\r\nimport Main from './components/Main';\r\nimport Favorites from './components/Favorites';\r\nimport { setActiveView, selectActiveView } from './redux/slices/activeViewSlice';\r\nimport { setFavorites, selectFavorites } from './redux/slices/favoritesSlice';\r\nimport { selectTemperature } from './redux/slices/temperatureSlice';\r\nimport { setFavoritesData, selectFavoritesData } from './redux/slices/favoritesDataSlice';\r\nimport { setTheme, selectTheme } from './redux/slices/themeSlice';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; \r\n// import { faSun } from '@fortawesome/fontawesome-svg-core';\r\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons'\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nconst App = ({}) =>{    \r\n    const dispatch = useDispatch();\r\n    const activeView = useSelector(selectActiveView);\r\n    const favorites = useSelector(selectFavorites);\r\n    const temperatureToggle = useSelector(selectTemperature);\r\n    const favoritesData = useSelector(selectFavoritesData);\r\n    const theme = useSelector(selectTheme);\r\n\r\n    const onFirstRender = () =>{\r\n        dispatch(setActiveView());\r\n        dispatch(setFavorites(JSON.parse(localStorage.getItem('favorites'))));\r\n        dispatch(setTheme(JSON.parse(localStorage.getItem('theme'))));\r\n    }\r\n\r\n    useEffect(() =>{\r\n        onFirstRender()\r\n    }, []);\r\n\r\n    const removeFavorite = (key) =>{\r\n        const cityId = key.split(':')[0];\r\n        const newFavoritesData = favoritesData.filter(favorite =>{\r\n            return favorite.key !== cityId;\r\n        });   \r\n        const newFavorites = favorites.filter(favorite =>{\r\n            return favorite !== key;\r\n        });\r\n        localStorage.setItem('favorites', JSON.stringify(newFavorites));\r\n        dispatch(setFavorites(JSON.parse(localStorage.getItem('favorites'))));\r\n        dispatch(setFavoritesData(newFavoritesData));\r\n    }\r\n\r\n    const getCurrentTemperature = (data) =>{\r\n        if(!data){return}\r\n        if(temperatureToggle){\r\n            return (\r\n                <div className=\"temperature-text\">\r\n                    <span>{data.Temperature.Metric.Value}</span>\r\n                    <DegreesIcon str={data.Temperature.Metric.Unit}/>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"temperature-text\">\r\n                <span>{data.Temperature.Imperial.Value}</span>\r\n                <DegreesIcon str={data.Temperature.Imperial.Unit}/>\r\n            </div>\r\n        )\r\n    }\r\n    const getWeatherImage = (icon) =>{\r\n        if(icon){\r\n            const str = (icon < 10) ? '0' + icon.toString() : icon.toString()\r\n            return `url(https://developer.accuweather.com/sites/default/files/${str}-s.png)`\r\n        }\r\n    }\r\n\r\n    const DegreesIcon = ({str}) =>{\r\n        str = str.toLowerCase();\r\n        switch(str){\r\n            case 'c':\r\n                return <span>&#8451;</span>;\r\n            case 'f':\r\n                return <span>&#8457;</span>;\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    const changeTheme = () =>{ \r\n        let tempTheme = 'Dark';     \r\n        switch(theme){\r\n            case 'Dark':\r\n                tempTheme = 'Light';\r\n                break;\r\n            case 'Light':                \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        dispatch(setTheme(tempTheme));\r\n        localStorage.setItem('theme', JSON.stringify(tempTheme));\r\n    }\r\n\r\n    return(\r\n        <div id=\"app-content\" className={theme === 'Light' ? 'light-theme' : 'dark-theme'}>\r\n            <div className=\"change-theme\" onClick={()=>changeTheme()}>\r\n                <FontAwesomeIcon icon={faSun}/>\r\n                <FontAwesomeIcon icon={faMoon}/>\r\n            </div>\r\n            <NotificationContainer/>\r\n            <Header/>\r\n            <div className=\"content\">            \r\n                <div className={`view ${activeView === 'Main' ? 'active' : 'hidden'}`}>\r\n                    <Main removeFavorite={removeFavorite}\r\n                        getCurrentTemperature={getCurrentTemperature}\r\n                        getWeatherImage={getWeatherImage}\r\n                        DegreesIcon={DegreesIcon}\r\n                        defaultSearchKey={'Tel Aviv'}\r\n                    />                                        \r\n                </div>\r\n                <div className={`view ${activeView === 'Favorites' ? 'active' : 'hidden'}`}>\r\n                    <Favorites removeFavorite={removeFavorite}\r\n                        getCurrentTemperature={getCurrentTemperature}\r\n                        getWeatherImage={getWeatherImage}\r\n                        DegreesIcon={DegreesIcon}\r\n                    />   \r\n                </div>         \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import { combineReducers, createStore } from 'redux';\r\nimport { cityReducer } from './slices/citySlice';\r\nimport { searchKeyReducer } from './slices/searchKeySlice';\r\nimport { currentWeatherReducer } from './slices/currentWeatherSlice';\r\nimport { forecastReducer } from './slices/forecastSlice';\r\nimport { activeViewReducer } from './slices/activeViewSlice';\r\nimport { temperatureReducer } from './slices/temperatureSlice';\r\nimport { favoritesReducer } from './slices/favoritesSlice';\r\nimport { favoritesDataReducer } from './slices/favoritesDataSlice';\r\nimport { menuToggleReducer } from './slices/menuSlice';\r\nimport { searchResultsReducer } from './slices/serchResultsSlice';\r\nimport { themeReducer } from './slices/themeSlice';\r\n\r\nconst reducers = {\r\n    city:cityReducer,\r\n    searchKey:searchKeyReducer,\r\n    currentWeather:currentWeatherReducer,\r\n    forecast:forecastReducer,\r\n    activeView:activeViewReducer,\r\n    temperatureToggle:temperatureReducer,\r\n    favorites:favoritesReducer,\r\n    favoritesData:favoritesDataReducer,\r\n    menuToggle:menuToggleReducer,\r\n    searchResults:searchResultsReducer,\r\n    theme:themeReducer\r\n}\r\n\r\nconst store = createStore(combineReducers(reducers));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}